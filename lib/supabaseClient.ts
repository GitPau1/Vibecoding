


import { createClient } from '@supabase/supabase-js';
import { authStorage } from './authStorage';
import { Player } from '../types';

// The recursive `Json` type generated by Supabase can cause a "Type instantiation is excessively deep and possibly infinite" error.
// To work around this, we use `any` for jsonb columns (`votes.players` and `vote_options.comments`).
// Further simplifying the type by setting Insert/Update to `any` can also help the TypeScript compiler.

export type Database = {
  public: {
    Tables: {
      articles: {
        Row: {
          id: string
          created_at: string
          title: string
          body: string
          image_url: string | null
          recommendations: number
          views: number
        }
        Insert: {
          title: string
          body: string
          image_url?: string | null
        }
        Update: {
          title?: string
          body?: string
          image_url?: string | null
        }
      }
      bug_reports: {
        Row: {
          id: string
          created_at: string
          title: string
          description: string
          url: string
          screenshot_url: string | null
        }
        Insert: {
          title: string
          description: string
          url: string
          screenshot_url?: string | null
        }
        Update: {
          title?: string
          description?: string
          url?: string
          screenshot_url?: string | null
        }
      }
      profiles: {
        Row: {
          id: string
          updated_at: string | null
          username: string
          nickname: string
        }
        Insert: {
          id: string
          updated_at?: string | null
          username: string
          nickname: string
        }
        Update: {
          updated_at?: string | null
          username?: string
          nickname?: string
        }
      }
      squad_players: {
        Row: {
          id: string
          created_at: string
          name: string
          number: number
          position: string
          photo_url: string | null
        }
        Insert: {
          name: string
          number: number
          position: string
          photo_url?: string | null
        }
        Update: {
          name?: string
          number?: number
          position?: string
          photo_url?: string | null
        }
      }
      vote_options: {
        Row: {
          comments: string[] | null
          created_at: string
          id: string
          label: string
          rating_count: number | null
          vote_id: string
          votes: number
        }
        Insert: {
          vote_id: string
          label: string
          comments?: string[] | null
        }
        Update: {
          vote_id?: string
          label?: string
          comments?: string[] | null
        }
      }
      votes: {
        Row: {
          created_at: string
          description: string | null
          end_date: string
          id: string
          image_url: string | null
          players: Player[] | null
          title: string
          type: string
        }
        Insert: {
          title: string
          description?: string | null
          type: string
          end_date: string
          image_url?: string | null
          players?: Player[] | null
        }
        Update: {
          title?: string
          description?: string | null
          type?: string
          end_date?: string
          image_url?: string | null
          players?: Player[] | null
        }
      }
      x_posts: {
        Row: {
          id: string
          created_at: string
          description: string
          post_url: string
        }
        Insert: {
          description: string
          post_url: string
        }
        Update: {
          description?: string
          post_url?: string
        }
      }
      user_votes: {
        Row: {
            user_id: string
            vote_id: string
            option_id: string
            created_at: string
        }
        Insert: {
            user_id: string
            vote_id: string
            option_id: string
        }
        Update: {
            user_id?: string
            vote_id?: string
            option_id?: string
        }
      }
      user_ratings: {
        Row: {
            user_id: string
            rating_id: string
            option_id: string
            rating: number
            comment: string | null
            created_at: string
        }
        Insert: {
            user_id: string
            rating_id: string
            option_id: string
            rating: number
            comment?: string | null
        }
        Update: {
            user_id?: string
            rating_id?: string
            option_id?: string
            rating?: number
            comment?: string | null
        }
      }
      user_article_recommendations: {
        Row: {
            user_id: string
            article_id: string
            created_at: string
        }
        Insert: {
            user_id: string
            article_id: string
        }
        Update: {
            user_id?: string
            article_id?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      handle_vote: {
        Args: {
          target_option_id: string
        }
        Returns: undefined
      }
      handle_recommendation: {
        Args: {
          target_article_id: string
        }
        Returns: undefined
      }
      increment_article_view: {
        Args: {
          article_id_to_inc: string
        }
        Returns: undefined
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// This application uses Vite, a modern build tool for web development.
// For client-side applications built with Vite, environment variables must be
// prefixed with `VITE_` to be exposed to the browser for security reasons.
// This is different from Create React App which uses `REACT_APP_`.
//
// When deploying to Vercel, you must set these environment variables in your
// Vercel project's settings. Make sure they are also prefixed with `VITE_`.
//
// For local development, create a `.env` file in the project's root directory with:
// VITE_SUPABASE_URL=your-supabase-url
// VITE_SUPABASE_ANON_KEY=your-supabase-anon-key

// Safely access environment variables to prevent crashes when `import.meta.env` is undefined.
// This can happen in environments that do not use Vite or a similar build tool.
const supabaseUrl = (import.meta as any).env?.VITE_SUPABASE_URL;
const supabaseAnonKey = (import.meta as any).env?.VITE_SUPABASE_ANON_KEY;


// We initialize the client, but it will be null if the environment variables are missing.
// The main App component will handle this case and display a message to the user.
export const supabase = (supabaseUrl && supabaseAnonKey)
  ? createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        storage: authStorage,
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true,
      },
    })
  : null;

if (!supabase) {
  console.warn("Supabase configuration is missing. The app will display an error message. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your environment.");
}


/*
-- REQUIRED SUPABASE SQL SETUP --
-- Run these queries in your Supabase project's SQL Editor to set up the database.

-- 0. INITIAL SETUP
-- In your Supabase project, go to Authentication -> Providers -> Email and turn OFF "Confirm email".
-- This allows users to log in immediately after signing up with a username and password.

-- 1. CLEANUP (Optional: Run this if you are starting from a fresh slate or want to reset)
-- DROP FUNCTION IF EXISTS handle_vote;
-- DROP FUNCTION IF EXISTS handle_recommendation;
-- DROP TRIGGER IF EXISTS on_rating_change ON public.user_ratings;
-- DROP FUNCTION IF EXISTS update_rating_aggregates;
-- DROP TABLE IF EXISTS user_article_recommendations;
-- DROP TABLE IF EXISTS user_ratings;
-- DROP TABLE IF EXISTS user_votes;
-- DROP TABLE IF EXISTS vote_options;
-- DROP TABLE IF EXISTS votes;
-- DROP TABLE IF EXISTS articles;
-- DROP TABLE IF EXISTS squad_players;
-- DROP TABLE IF EXISTS x_posts;
-- DROP TABLE IF EXISTS bug_reports;
-- DROP TABLE IF EXISTS profiles;

-- 2. CREATE CORE TABLES

-- Profiles table (stores public user data)
CREATE TABLE profiles (
  id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL PRIMARY KEY,
  updated_at timestamp with time zone,
  username text UNIQUE NOT NULL,
  nickname text NOT NULL,
  CONSTRAINT username_length CHECK (char_length(username) >= 3 AND char_length(username) <= 20),
  CONSTRAINT nickname_length CHECK (char_length(nickname) >= 2 AND char_length(nickname) <= 20)
);
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON profiles FOR UPDATE USING (auth.uid() = id);

-- Articles table
CREATE TABLE articles (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  body text NOT NULL,
  image_url text,
  recommendations integer DEFAULT 0 NOT NULL,
  views integer DEFAULT 0 NOT NULL
);
ALTER TABLE articles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Articles are viewable by everyone." ON articles FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create articles." ON articles FOR INSERT TO authenticated WITH CHECK (true);
-- Note: 'recommendations' and 'views' are only updated via RPC functions.

-- Votes table (for all vote types)
CREATE TABLE votes (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  description text,
  type text NOT NULL,
  image_url text,
  end_date text NOT NULL,
  players jsonb
);
ALTER TABLE votes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Votes are viewable by everyone." ON votes FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create votes." ON votes FOR INSERT TO authenticated WITH CHECK (true);

-- Vote Options table
CREATE TABLE vote_options (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  vote_id uuid REFERENCES votes(id) ON DELETE CASCADE NOT NULL,
  label text NOT NULL,
  votes numeric DEFAULT 0 NOT NULL,
  rating_count integer DEFAULT 0,
  comments jsonb DEFAULT '[]'::jsonb
);
ALTER TABLE vote_options ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Vote options are viewable by everyone." ON vote_options FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create vote options." ON vote_options FOR INSERT TO authenticated WITH CHECK (true);
-- Note: 'votes', 'rating_count', 'comments' are only updated via RPC functions or triggers.

-- Other Content Tables
CREATE TABLE x_posts ( id uuid DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, description text NOT NULL, post_url text NOT NULL );
ALTER TABLE x_posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "X-posts are viewable by everyone." ON x_posts FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create x-posts." ON x_posts FOR INSERT TO authenticated WITH CHECK (true);

CREATE TABLE squad_players ( id uuid DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, name text NOT NULL, "number" integer NOT NULL, position text NOT NULL, photo_url text );
ALTER TABLE squad_players ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Squad players are viewable by everyone." ON squad_players FOR SELECT USING (true);
CREATE POLICY "Authenticated users can manage squad players." ON squad_players FOR ALL TO authenticated WITH CHECK (true);

CREATE TABLE bug_reports ( id uuid DEFAULT gen_random_uuid() PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, title text NOT NULL, description text NOT NULL, url text NOT NULL, screenshot_url text );
ALTER TABLE bug_reports ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Anyone can submit a bug report." ON bug_reports FOR INSERT WITH CHECK (true);


-- 3. CREATE USER ACTIVITY TRACKING TABLES

-- User Votes tracking table
CREATE TABLE user_votes (
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  vote_id uuid REFERENCES votes(id) ON DELETE CASCADE NOT NULL,
  option_id uuid REFERENCES vote_options(id) ON DELETE CASCADE NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  PRIMARY KEY (user_id, vote_id)
);
ALTER TABLE user_votes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own votes." ON user_votes FOR ALL USING (auth.uid() = user_id);

-- User Ratings tracking table
CREATE TABLE user_ratings (
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  rating_id uuid REFERENCES votes(id) ON DELETE CASCADE NOT NULL,
  option_id uuid REFERENCES vote_options(id) ON DELETE CASCADE NOT NULL,
  rating numeric NOT NULL CHECK (rating >= 1 AND rating <= 10),
  comment text,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  PRIMARY KEY (user_id, option_id)
);
ALTER TABLE user_ratings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own ratings." ON user_ratings FOR ALL USING (auth.uid() = user_id);

-- User Article Recommendations tracking table
CREATE TABLE user_article_recommendations (
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  article_id uuid REFERENCES articles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  PRIMARY KEY (user_id, article_id)
);
ALTER TABLE user_article_recommendations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own recommendations." ON user_article_recommendations FOR ALL USING (auth.uid() = user_id);


-- 4. CREATE FUNCTIONS AND TRIGGERS

-- Function to handle new user profile creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, username, nickname)
  VALUES (new.id, new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'nickname');
  RETURN new;
END;
$$;
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Function to handle a user's vote
CREATE OR REPLACE FUNCTION handle_vote(target_option_id uuid)
RETURNS void LANGUAGE plpgsql SECURITY DEFINER
AS $$
DECLARE
  target_vote_id uuid;
BEGIN
  SELECT vote_id INTO target_vote_id FROM public.vote_options WHERE id = target_option_id;
  IF EXISTS (SELECT 1 FROM public.user_votes WHERE user_id = auth.uid() AND vote_id = target_vote_id) THEN RETURN; END IF;
  INSERT INTO public.user_votes (user_id, vote_id, option_id) VALUES (auth.uid(), target_vote_id, target_option_id);
  UPDATE public.vote_options SET votes = votes + 1 WHERE id = target_option_id;
END;
$$;

-- Function to handle an article recommendation
CREATE OR REPLACE FUNCTION handle_recommendation(target_article_id uuid)
RETURNS void LANGUAGE plpgsql SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.user_article_recommendations (user_id, article_id) VALUES (auth.uid(), target_article_id) ON CONFLICT DO NOTHING;
  IF FOUND THEN
    UPDATE public.articles SET recommendations = recommendations + 1 WHERE id = target_article_id;
  END IF;
END;
$$;

-- Function to increment article view count (publicly accessible)
CREATE OR REPLACE FUNCTION increment_article_view(article_id_to_inc uuid)
RETURNS void LANGUAGE plpgsql SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.articles SET views = views + 1 WHERE id = article_id_to_inc;
END;
$$;

-- Function to update rating aggregates on the vote_options table
CREATE OR REPLACE FUNCTION update_rating_aggregates()
RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER
AS $$
DECLARE
    agg_option_id uuid;
BEGIN
    agg_option_id := COALESCE(NEW.option_id, OLD.option_id);
    
    UPDATE public.vote_options
    SET
        votes = (SELECT COALESCE(SUM(rating), 0) FROM public.user_ratings WHERE option_id = agg_option_id),
        rating_count = (SELECT COUNT(*) FROM public.user_ratings WHERE option_id = agg_option_id),
        comments = (SELECT COALESCE(jsonb_agg(comment), '[]'::jsonb) FROM public.user_ratings WHERE option_id = agg_option_id AND comment IS NOT NULL AND comment != '')
    WHERE id = agg_option_id;
    
    RETURN NULL;
END;
$$;

-- Trigger to call the aggregate function when user_ratings table changes
CREATE TRIGGER on_rating_change
  AFTER INSERT OR UPDATE OR DELETE ON public.user_ratings
  FOR EACH ROW EXECUTE FUNCTION update_rating_aggregates();


-- 5. SETUP STORAGE
-- Go to Storage in your Supabase dashboard.
-- Create a new PUBLIC bucket named 'bug_screenshots'.
-- Go to Storage -> Policies and create a new policy for the 'bug_screenshots' bucket
-- that allows anonymous users to INSERT objects.
-- Name: "Allow anonymous uploads"
-- Allowed operations: INSERT
-- Target roles: anon, authenticated
-- Policy definition: (bucket_id = 'bug_screenshots'::text)
*/