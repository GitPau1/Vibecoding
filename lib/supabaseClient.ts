

import { createClient } from '@supabase/supabase-js';

// The recursive `Json` type generated by Supabase can cause a "Type instantiation is excessively deep and possibly infinite" error.
// To work around this, we are now using `any` for the jsonb columns (`players` and `comments`).
// This breaks the type recursion and allows TypeScript to correctly infer types for other operations.
// While this reduces type safety for these specific columns, it resolves the critical build errors.

export type Database = {
  public: {
    Tables: {
      articles: {
        Row: {
          id: string
          created_at: string
          title: string
          body: string
          image_url: string | null
          recommendations: number
          views: number
          user_id: string
        }
        Insert: {
          id?: string
          created_at?: string
          title: string
          body: string
          image_url?: string | null
          recommendations?: number
          views?: number
          user_id: string
        }
        Update: {
          id?: string
          created_at?: string
          title?: string
          body?: string
          image_url?: string | null
          recommendations?: number
          views?: number
          user_id?: string
        }
      }
      bug_reports: {
        Row: {
          id: string
          created_at: string
          title: string
          description: string
          url: string
          screenshot_url: string | null
        }
        Insert: {
          id?: string
          created_at?: string
          title: string
          description: string
          url: string
          screenshot_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          title?: string
          description?: string
          url?: string
          screenshot_url?: string | null
        }
      }
      profiles: {
        Row: {
          id: string
          updated_at: string | null
          username: string
          nickname: string
        }
        Insert: {
          id: string
          updated_at?: string | null
          username: string
          nickname: string
        }
        Update: {
          id?: string
          updated_at?: string | null
          username?: string
          nickname?: string
        }
      }
      squad_players: {
        Row: {
          id: string
          created_at: string
          name: string
          number: number
          position: string
          photo_url: string | null
        }
        Insert: {
          id?: string
          created_at?: string
          name: string
          number: number
          position: string
          photo_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          name?: string
          number?: number
          position?: string
          photo_url?: string | null
        }
      }
      vote_options: {
        Row: {
          comments: any[] | null
          created_at: string
          id: string
          label: string
          rating_count: number | null
          vote_id: string
          votes: number
        }
        Insert: {
          comments?: any[] | null
          created_at?: string
          id?: string
          label: string
          rating_count?: number | null
          vote_id: string
          votes?: number
        }
        Update: {
          comments?: any[] | null
          created_at?: string
          id?: string
          label?: string
          rating_count?: number | null
          vote_id?: string
          votes?: number
        }
      }
      votes: {
        Row: {
          created_at: string
          description: string | null
          end_date: string
          id: string
          image_url: string | null
          players: any[] | null
          title: string
          type: string
          user_id: string
        }
        Insert: {
          created_at?: string
          description?: string | null
          end_date: string
          id?: string
          image_url?: string | null
          players?: any[] | null
          title: string
          type: string
          user_id: string
        }
        Update: {
          created_at?: string
          description?: string | null
          end_date?: string
          id?: string
          image_url?: string | null
          players?: any[] | null
          title?: string
          type?: string
          user_id?: string
        }
      }
      x_posts: {
        Row: {
          id: string
          created_at: string
          description: string
          post_url: string
          user_id: string
        }
        Insert: {
          id?: string
          created_at?: string
          description: string
          post_url: string
          user_id: string
        }
        Update: {
          id?: string
          created_at?: string
          description?: string
          post_url?: string
          user_id?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      increment_recommendation: {
        Args: {
          article_id_to_inc: string
        }
        Returns: undefined
      }
      increment_article_view: {
        Args: {
          article_id_to_inc: string
        }
        Returns: undefined
      }
      increment_vote: {
        Args: {
          option_id_to_inc: string
        }
        Returns: undefined
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// This application uses Vite, a modern build tool for web development.
// For client-side applications built with Vite, environment variables must be
// prefixed with `VITE_` to be exposed to the browser for security reasons.
// This is different from Create React App which uses `REACT_APP_`.
//
// When deploying to Vercel, you must set these environment variables in your
// Vercel project's settings. Make sure they are also prefixed with `VITE_`.
//
// For local development, create a `.env` file in the project's root directory with:
// VITE_SUPABASE_URL=your-supabase-url
// VITE_SUPABASE_ANON_KEY=your-supabase-anon-key

// Safely access environment variables to prevent crashes when `import.meta.env` is undefined.
// This can happen in environments that do not use Vite or a similar build tool.
const supabaseUrl = (import.meta as any).env?.VITE_SUPABASE_URL;
const supabaseAnonKey = (import.meta as any).env?.VITE_SUPABASE_ANON_KEY;


// We initialize the client, but it will be null if the environment variables are missing.
// The main App component will handle this case and display a message to the user.
export const supabase = (supabaseUrl && supabaseAnonKey)
  ? createClient<Database>(supabaseUrl, supabaseAnonKey)
  : null;

if (!supabase) {
  console.warn("Supabase configuration is missing. The app will display an error message. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your environment.");
}

/*
-- REQUIRED SUPABASE SQL SETUP --
-- Run these queries in your Supabase project's SQL Editor.
-- Note: Supabase client libraries use parameterized queries, which protects against SQL Injection.

-- 0. Make sure to DISABLE "Confirm email" in Supabase Auth settings for username login to work smoothly.
-- Go to Authentication -> Providers -> Email and turn off "Confirm email".

-- 1. Create Tables:
-- Note: Enable RLS (Row Level Security) for all tables and define policies.

-- PROFILES TABLE (for user data)
CREATE TABLE profiles (
  id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL PRIMARY KEY,
  updated_at timestamp with time zone,
  username text UNIQUE NOT NULL,
  nickname text NOT NULL,
  
  CONSTRAINT username_length CHECK (char_length(username) >= 3 AND char_length(username) <= 20),
  CONSTRAINT nickname_length CHECK (char_length(nickname) >= 2 AND char_length(nickname) <= 20)
);
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON profiles FOR UPDATE USING (auth.uid() = id);


-- ARTICLES TABLE
CREATE TABLE articles (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  body text NOT NULL,
  image_url text,
  recommendations integer DEFAULT 0 NOT NULL,
  views integer DEFAULT 0 NOT NULL,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
ALTER TABLE articles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on articles" ON articles FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to insert articles" ON articles FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);


-- VOTES & RATINGS TABLE
CREATE TABLE votes (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  description text,
  type text NOT NULL, -- Enum: '경기 결과 예측', '베스트 플레이어', '찬반 투표', '선수 평점'
  image_url text,
  end_date text NOT NULL,
  players jsonb, -- Used for PLAYER and RATING types to store player info
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
ALTER TABLE votes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on votes" ON votes FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to insert votes" ON votes FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);


-- VOTE OPTIONS TABLE
CREATE TABLE vote_options (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  vote_id uuid REFERENCES votes(id) ON DELETE CASCADE NOT NULL,
  label text NOT NULL,
  votes numeric DEFAULT 0 NOT NULL,
  rating_count integer DEFAULT 0, -- For RATING type
  comments jsonb DEFAULT '[]'::jsonb -- For RATING type
);
ALTER TABLE vote_options ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on vote_options" ON vote_options FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to insert vote options" ON vote_options FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to update vote options" ON vote_options FOR UPDATE TO authenticated USING (true); -- For rating submissions


-- X_POSTS TABLE
CREATE TABLE x_posts (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  description text NOT NULL,
  post_url text NOT NULL,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);
ALTER TABLE x_posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on x_posts" ON x_posts FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to insert x_posts" ON x_posts FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);


-- BUG REPORTS TABLE
CREATE TABLE bug_reports (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  description text NOT NULL,
  url text NOT NULL,
  screenshot_url text
);
ALTER TABLE bug_reports ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow anon insert on bug_reports" ON bug_reports FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow authenticated read on bug_reports" ON bug_reports FOR SELECT TO authenticated USING (true); -- Or to a specific admin role


-- SQUAD PLAYERS TABLE
CREATE TABLE squad_players (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text NOT NULL,
  "number" integer NOT NULL,
  position text NOT NULL, -- e.g. '골키퍼', '수비수', '미드필더', '공격수'
  photo_url text
  -- This table does not need user_id if we consider the squad to be global for the app
  -- If squads were user-specific, a user_id column would be needed here too.
);
ALTER TABLE squad_players ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on squad_players" ON squad_players FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage squad_players" ON squad_players FOR ALL TO authenticated USING (true);


-- 2. Create RPC functions to increment votes/recommendations atomically
-- This prevents race conditions where two users vote at the same time.
-- SECURITY DEFINER allows these functions to bypass RLS, so be careful.
CREATE OR REPLACE FUNCTION increment_vote(option_id_to_inc uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.vote_options
  SET votes = votes + 1
  WHERE id = option_id_to_inc;
END;
$$;

CREATE OR REPLACE FUNCTION increment_recommendation(article_id_to_inc uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.articles
  SET recommendations = recommendations + 1
  WHERE id = article_id_to_inc;
END;
$$;

CREATE OR REPLACE FUNCTION increment_article_view(article_id_to_inc uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.articles
  SET views = views + 1
  WHERE id = article_id_to_inc;
END;
$$;


-- 3. Create Storage Bucket for Bug Reports
-- Go to Storage -> Buckets -> Create Bucket
-- Name it 'bug_screenshots' and make it a Public bucket.
-- Define policies for upload access. For an anonymous app, you might allow all inserts:
-- (Go to Storage -> Policies -> bug_screenshots -> New Policy -> For INSERT)
-- CREATE POLICY "Allow anon uploads" ON storage.objects
-- FOR INSERT TO public
-- WITH CHECK (bucket_id = 'bug_screenshots');


-- 4. Set up trigger to automatically create a profile for new users from metadata
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, username, nickname)
  VALUES (new.id, new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'nickname');
  RETURN new;
END;
$$;

CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

*/