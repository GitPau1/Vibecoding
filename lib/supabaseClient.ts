

import { createClient, Json } from '@supabase/supabase-js';

// The recursive `Json` type generated by Supabase can cause a "Type instantiation is excessively deep and possibly infinite" error.
// To work around this, we are now using `any` for complex jsonb columns.
// This breaks the type recursion and allows TypeScript to correctly infer types for other operations.

/*
-- SQL for new 'matches' table
create table matches (
  id uuid primary key default gen_random_uuid(),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  competition text not null,
  home_team text not null,
  away_team text not null,
  match_time timestamp with time zone not null,
  home_score int,
  away_score int,
  is_finished boolean default false not null,
  user_id uuid references auth.users not null
);
alter table matches enable row level security;
create policy "Allow public read-only access" on public.matches for select using (true);
create policy "Allow individual insert access" on public.matches for insert with check (auth.uid() = user_id);
create policy "Allow individual update access" on public.matches for update using (auth.uid() = user_id);

-- SQL to add match_id to 'votes' table
alter table votes
add column match_id uuid references public.matches;

*/

export type Database = {
  public: {
    Tables: {
      articles: {
        Row: {
          id: string
          created_at: string
          title: string
          body: string
          image_url: string | null
          recommendations: number
          views: number
          user_id: string
        }
        Insert: {
          id?: string
          created_at?: string
          title: string
          body: string
          image_url?: string | null
          recommendations?: number
          views?: number
          user_id: string
        }
        Update: {
          id?: string
          created_at?: string
          title?: string
          body?: string
          image_url?: string | null
          recommendations?: number
          views?: number
          user_id?: string
        }
        Relationships: [
          {
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      bug_reports: {
        Row: {
          id: string
          created_at: string
          title: string
          description: string
          url: string
          screenshot_url: string | null
        }
        Insert: {
          id?: string
          created_at?: string
          title: string
          description: string
          url: string
          screenshot_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          title?: string
          description?: string
          url?: string
          screenshot_url?: string | null
        }
        Relationships: []
      }
      matches: {
        Row: {
          id: string
          created_at: string
          competition: string
          home_team: string
          away_team: string
          match_time: string
          home_score: number | null
          away_score: number | null
          is_finished: boolean
          user_id: string
        }
        Insert: {
          id?: string
          created_at?: string
          competition: string
          home_team: string
          away_team: string
          match_time: string
          home_score?: number | null
          away_score?: number | null
          is_finished?: boolean
          user_id: string
        }
        Update: {
          id?: string
          created_at?: string
          competition?: string
          home_team?: string
          away_team?: string
          match_time?: string
          home_score?: number | null
          away_score?: number | null
          is_finished?: boolean
          user_id?: string
        }
        Relationships: [
          {
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          id: string
          updated_at: string | null
          username: string
          nickname: string
        }
        Insert: {
          id: string
          updated_at?: string | null
          username: string
          nickname: string
        }
        Update: {
          id?: string
          updated_at?: string | null
          username?: string
          nickname?: string
        }
        Relationships: [
          {
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      score_predictions: {
        Row: {
          id: string
          created_at: string
          vote_id: string
          user_id: string
          score_a: number
          score_b: number
        }
        Insert: {
          id?: string
          created_at?: string
          vote_id: string
          user_id: string
          score_a: number
          score_b: number
        }
        Update: {
          id?: string
          created_at?: string
          vote_id?: string
          user_id?: string
          score_a?: number
          score_b?: number
        }
        Relationships: [
          {
            columns: ["vote_id"]
            referencedRelation: "votes"
            referencedColumns: ["id"]
          },
          {
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      squad_players: {
        Row: {
          id: string
          created_at: string
          name: string
          number: number
          position: string
          photo_url: string | null
        }
        Insert: {
          id?: string
          created_at?: string
          name: string
          number: number
          position: string
          photo_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          name?: string
          number?: number
          position?: string
          photo_url?: string | null
        }
        Relationships: []
      }
      votes: {
        Row: {
          id: string
          created_at: string
          title: string
          description: string | null
          type: string
          end_date: string
          image_url: string | null
          players: Json | null
          user_id: string
          match_id: string | null
        }
        Insert: {
          id?: string
          created_at?: string
          title: string
          description?: string | null
          type: string
          end_date: string
          image_url?: string | null
          players?: Json | null
          user_id: string
          match_id?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          title?: string
          description?: string | null
          type?: string
          end_date?: string
          image_url?: string | null
          players?: Json | null
          user_id?: string
          match_id?: string | null
        }
        Relationships: [
          {
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            columns: ["match_id"]
            referencedRelation: "matches"
            referencedColumns: ["id"]
          }
        ]
      }
      vote_options: {
        Row: {
          id: string
          vote_id: string
          label: string
          votes: number
          rating_count: number | null
          comments: Json | null
        }
        Insert: {
          id?: string
          vote_id: string
          label: string
          votes?: number
          rating_count?: number | null
          comments?: Json | null
        }
        Update: {
          id?: string
          vote_id?: string
          label?: string
          votes?: number
          rating_count?: number | null
          comments?: Json | null
        }
        Relationships: [
          {
            columns: ["vote_id"]
            referencedRelation: "votes"
            referencedColumns: ["id"]
          }
        ]
      }
      x_posts: {
        Row: {
          id: string
          created_at: string
          description: string
          post_url: string
          user_id: string
        }
        Insert: {
          id?: string
          created_at?: string
          description: string
          post_url: string
          user_id: string
        }
        Update: {
          id?: string
          created_at?: string
          description?: string
          post_url?: string
          user_id?: string
        }
        Relationships: [
          {
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      increment_recommendation: {
        Args: { article_id_to_inc: string }
        Returns: void
      }
      increment_article_view: {
        Args: { article_id_to_inc: string }
        Returns: void
      }
      increment_vote: {
        Args: { option_id_to_inc: string }
        Returns: void
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

const supabaseUrl = (import.meta as any)?.env?.VITE_SUPABASE_URL;
const supabaseAnonKey = (import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY;

export const supabase = supabaseUrl && supabaseAnonKey
  ? createClient<Database>(supabaseUrl, supabaseAnonKey)
  : null;